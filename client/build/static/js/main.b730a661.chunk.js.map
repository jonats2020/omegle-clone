{"version":3,"sources":["images/omegle-logo.png","components/VideoPlayer.js","App.js","index.js"],"names":["VideoPlayer","video","id","className","playsInline","muted","ref","autoPlay","width","height","controls","SERVER_URL","socket","io","App","useState","mediaStream","setMediaStream","myStreamId","setMyStreamId","otherStreamId","setOtherStreamId","callInformation","setCallInformation","callAccepted","setCallAccepted","setCallEnded","myVideo","useRef","otherVideo","connectionRef","useEffect","navigator","mediaDevices","getUserMedia","audio","then","currentMediaStream","current","srcObject","error","console","log","on","from","signal","isReceived","answercall","peer","Peer","initiator","trickle","stream","data","emit","to","currentStream","callUser","userToCall","signalData","callRandomUser","a","fetch","response","json","activeUsers","numberOfActiveUsers","length","selectedRandomUser","getRandomInt","max","Math","floor","random","src","logo","alt","onClick","destroy","window","location","reload","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b730a661.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/omegle-logo.b10f3a12.png\";","import React from 'react';\n\nimport './VideoPlayer.css';\n\nconst VideoPlayer = ({ video, id }) => {\n  return (\n    <div className=\"container\">\n      <video\n        playsInline\n        muted\n        ref={video}\n        autoPlay\n        width=\"768\"\n        height=\"432\"\n        controls\n      />\n      <p>{id}</p>\n    </div>\n  );\n};\n\nexport default VideoPlayer;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\n\nimport './styles.css';\nimport logo from './images/omegle-logo.png';\nimport VideoPlayer from './components/VideoPlayer';\n\nconst SERVER_URL = 'https://omegle-clone-nats.herokuapp.com/';\n// const SERVER_URL = 'http://localhost:5000';\n\nconst socket = io(SERVER_URL);\n\nconst App = () => {\n  const [mediaStream, setMediaStream] = useState(null);\n  const [myStreamId, setMyStreamId] = useState('');\n  const [otherStreamId, setOtherStreamId] = useState('');\n  const [callInformation, setCallInformation] = useState({});\n  const [callAccepted, setCallAccepted] = useState(false);\n  const [callEnded, setCallEnded] = useState(false);\n\n  const myVideo = useRef();\n  const otherVideo = useRef();\n  const connectionRef = useRef();\n\n  useEffect(() => {\n    try {\n      navigator.mediaDevices\n        .getUserMedia({ video: true, audio: true })\n        .then((currentMediaStream) => {\n          setMediaStream(currentMediaStream);\n\n          myVideo.current.srcObject = currentMediaStream;\n        });\n    } catch (error) {\n      console.log(error);\n    }\n\n    socket.on('me', (id) => setMyStreamId(id));\n\n    socket.on('calluser', ({ from, signal }) => {\n      setCallInformation({\n        isReceived: true,\n        from,\n        signal,\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    if (callInformation.isReceived && !callAccepted) {\n      answercall();\n    }\n  }, [callInformation]);\n\n  const answercall = () => {\n    setCallAccepted(true);\n\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream: mediaStream,\n    });\n\n    peer.on('signal', (data) => {\n      socket.emit('answercall', { signal: data, to: callInformation.from });\n    });\n\n    peer.on('stream', (currentStream) => {\n      otherVideo.current.srcObject = currentStream;\n    });\n\n    peer.signal(callInformation.signal);\n\n    connectionRef.current = peer;\n  };\n\n  const callUser = (id) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream: mediaStream,\n    });\n\n    peer.on('signal', (data) => {\n      socket.emit('calluser', {\n        userToCall: id,\n        signalData: data,\n        from: myStreamId,\n      });\n    });\n\n    peer.on('stream', (currentStream) => {\n      otherVideo.current.srcObject = currentStream;\n    });\n\n    socket.on('callaccepted', (signal) => {\n      setCallAccepted(true);\n\n      peer.signal(signal);\n    });\n\n    connectionRef.current = peer;\n  };\n\n  const leaveCall = () => {\n    setCallEnded(true);\n\n    if (connectionRef) {\n      connectionRef.current?.destroy();\n\n      window.location.reload();\n    }\n  };\n\n  const callRandomUser = async () => {\n    const response = await fetch(SERVER_URL);\n\n    const activeUsers = await response.json();\n\n    const numberOfActiveUsers = activeUsers.length;\n\n    const selectedRandomUser = getRandomInt(numberOfActiveUsers);\n\n    setOtherStreamId(activeUsers[selectedRandomUser]);\n\n    callUser(activeUsers[selectedRandomUser]);\n  };\n\n  const getRandomInt = (max) => {\n    return Math.floor(Math.random() * max);\n  };\n\n  return (\n    <div>\n      <img src={logo} alt=\"omegle\" height={100} />\n\n      <div className=\"videoPlayerContainer\">\n        <VideoPlayer video={otherVideo} id={otherStreamId} />\n        <VideoPlayer video={myVideo} id={myStreamId} />\n      </div>\n\n      <div className=\"controls\">\n        <div className=\"controls__container\">\n          <button onClick={callRandomUser}>NEXT</button>\n          <button onClick={leaveCall}>STOP</button>\n        </div>\n\n        <div className=\"chat__container\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './styles.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}